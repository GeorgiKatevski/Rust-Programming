use std::str::FromStr;
//use std::num::ParseIntError;
use std::cmp::Ordering;


#[derive(Debug, PartialEq, Eq)]
pub struct Bigint {
    sign: i8,
    digits: Vec<u8>,
}


impl Bigint {
    /// Конструира нов Bigint със стойност "0" и положителен знак.
    /// Това може да означава празен вектор с цифри или масив с една цифра `0` -- ваш избор.
    ///
    pub fn new() -> Self {
      let  mut vec= Vec::with_capacity(1);
        vec.push(0);
      return  Bigint{ sign:1, digits:vec};
    }

    /// Конструира нов Bigint с подадените цифри и знак.
    ///
    /// Тук е добро място където можете да вкарате малко валидация и нормализиране на входа -- да
    /// премахнете допълнителни нули или да се погрижите, че нулата винаги има консистентен знак.
    /// Стига да се погрижите винаги да използвате функцията при конструириане на нови Bigint-ове.
    ///
    /// Тази функция НЕ Е публична, така че НЕ Е задължителна -- ако не ви трябва, може смело да я
    /// изтриете.
    ///
    fn from_components(digits: Vec<u8>, sign: i8) -> Self {
    return Self{sign,digits};
        
    }

    /// Връща `true` ако числото е положително. Нулата не е положителна.
    pub fn is_positive(&self) -> bool {
        if self.sign==-1 
        {
            return false;
        }else
        {
            return true;
        }
    }

    /// Връща `true` ако числото е отрицателно. Нулата не е отрицателна.
    pub fn is_negative(&self) -> bool {
        if self.sign==-1 
        {
            return true;
        }else
        {
            return false;
        }
    }
}


#[derive(Debug)]
pub struct ParseError;

impl FromStr for Bigint {
    type Err = ParseError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {    
       let num_string=s.to_string();
       let mut vec= Vec::new();
       
       
       let mut _sign=0;
let mut flag=false;
if num_string.len()==0
{
    vec.push(0);
    _sign=1;
   
}


if num_string.len() != 0 &&num_string.as_bytes()[0]as char =='-' 
{
    _sign=-1;
}
else{
    _sign=1;
}



    let mut count=true;
    for c in num_string.chars() { 
    
    if c=='-' && count==true
    {
        count=false;
        if flag==false{
        continue;
        }else
        {
            return Err(ParseError); 
        }

    }
    if c=='+' && count== true
    {
        count=false;
        if flag==false{
            continue;
            }else
            {
                return Err(ParseError); 
            }
    }
    
    if  flag==false && c== '0' 
    {
        continue;
    }
    if c!='0' && !(c).is_digit(10) && flag==true
    {
           
        return Err(ParseError); 
    }
  
    flag=true;
    
    if c!='0' && !(c).is_digit(10) && flag==true
    {
           
        return Err(ParseError); 
    }
    println!("{:?}:--",c as u8 - '0' as u8);
    vec.push(c as u8 - '0' as u8);   


}


if vec.len()==0
{
    vec.push(0);
    _sign=1;
}

Ok(Bigint{digits:vec,sign:_sign})


    }
}

impl PartialOrd for Bigint {
    /// Две цели числа винаги могат да се сравнят, така че "частичното" равенство е същото като
    /// пълното.
    ///
    fn partial_cmp(&self, other: &Bigint) -> Option<Ordering> {
        Some(self.cmp(other))

    }
}
#[allow(non_snake_case)]
impl Ord for Bigint {
    /// Ако едното от числата има по-голям брой цифри, то ще бъде по-голямото. (Стига да не са нули
    /// -- вероятно е добра идея да се погрижите да няма започващи нули при конструкция.)
    ///
    /// Ако двете числа имат еднакъв брой цифри, лексикографско сравнение на числата ще ви даде
    /// правилен резултат -- от по-значимите цифри към по-малко значимите. Внимавайте в какъв ред
    /// си държите цифритe и дали не трябва да ги обърнете.
    ///
    fn cmp(&self, other: &Bigint) -> Ordering {
        let a=self.digits.len() ;  
        let _resultG = Ordering::Greater.then(Ordering::Greater);
        let _resultL = Ordering::Less.then(Ordering::Less);
        let _resultE = Ordering::Equal.then(Ordering::Equal);
        if self.is_negative() && other.is_positive()
        {
            return _resultL;
        } else if self.is_positive() && other.is_negative()
        {
            return _resultG;
        } else  {
        if self.digits.len() > other.digits.len() && (self.is_positive() && other.is_positive())
        {
            
            return _resultG;
        }
         else if self.digits.len() < other.digits.len() && (self.is_positive() && other.is_positive())
        {
            
            return _resultL;
        } 
        else if self.digits.len() < other.digits.len() && (self.is_negative() && other.is_negative())
        {
            
            return _resultG;
        } 
        else if self.digits.len() > other.digits.len() && (self.is_negative() && other.is_negative())
        {
            
            return _resultL;
        } 
        else
      {
                for i  in 0..a {
                    if self.digits[i as usize]   > other.digits[i as usize]  && (self.is_positive() && other.is_positive())
                    {
                        
                        return _resultG;
                    } 
                    else if self.digits[i as usize] < other.digits[i as usize]  && (self.is_positive() && other.is_positive())
                    {
                        return _resultL;
                    }
                    if self.digits[i as usize]   > other.digits[i as usize]  && (self.is_negative() && other.is_negative())
                    {
                        
                        return _resultL;
                    } 
                    else if self.digits[i as usize] < other.digits[i as usize]  && (self.is_negative() && other.is_negative())
                    {
                        return _resultG;
                    }
                   
                      
       }  
           
       return _resultE;
      }
    }
    }
}

use::std::char;
use std::ops::Add;
impl Add for Bigint {
    type Output = Bigint;

    /// За да съберете две числа, първия въпрос е: какви са им знаците?
    ///
    /// - Ако и двете са положителни, събираме ги цифра по цифра и слагаме на резултата положителен
    ///   знак.
    /// - Ако и двете са отрицателни, пак можем да ги съберем цифра по цифра и да сложим
    ///   отрицателен знак на крайния резултат.
    /// - Ако имат различни знаци, намираме по-голямото *по абсолютна стойност*. Изваждаме цифрите
    ///   на по-малкото от по-голямото. Знака на резултата е знака на по-голямото по абсолютна
    ///   стойност. Ако са равни, резултата трябва да е нула (която винаги се очаква да е
    ///   положителна).
    ///
    /// При събиране цифра по цифра, не забравяйте да пренасяте "едно наум" ако резултата е
    /// по-голям от десетична цифра. При различна дължина на списъците от цифри, можете да
    /// запълните с нули, да внимавате с индексите, или нещо по средата.
    ///
    fn add(self, other: Self) -> Self { 
       if self.is_positive() && other.is_negative()
       {        
           if check(&self.digits,&other.digits)==Ordering::Greater.then(Ordering::Greater)
              {
                  return Self{digits:subtract_digits(self.digits,other.digits),sign:1};
              }else if check(&self.digits,&other.digits)==Ordering::Less.then(Ordering::Less)
              {
                return Self{digits:subtract_digits(other.digits,self.digits),sign:-1};
              }
              else
              {
                  
                let mut vec=Vec::new();
                vec.push(0);
                return  Self{digits:vec,sign:1};
              }
        } 
       else if self.is_negative() && other.is_positive()
       {

            if check(&self.digits,&other.digits)==Ordering::Greater.then(Ordering::Greater)
                {
            return Self{digits:subtract_digits(self.digits,other.digits),sign:-1};
                }
                else if check(&self.digits,&other.digits)==Ordering::Less.then(Ordering::Less)
                {
                    return Self{digits:subtract_digits(other.digits,self.digits),sign:1};
                }
                else
                {
                    let mut vec=Vec::new();
                vec.push(0);
                return  Self{digits:vec,sign:1};
                }
       
       
        }
       else if self.is_negative() && other.is_negative()
        {
            return Self{digits:add_digits(self.digits,other.digits),sign:-1};
        }
        else
        {
            return Self{digits:add_digits(self.digits,other.digits),sign:1};
        }    
    }
    }


use std::ops::Sub;
impl Sub for Bigint {
    type Output = Bigint;

    /// Изваждането често се имплементира като събиране с отрицателен знак. Тоест, `A - B` е
    /// еквивалентно на `A + (-B)`. Можете да имплементирате изваждането като форма на събиране, и
    /// в него да пакетирате логиката. Или можете да проверите знаците и да разделите логиката по
    /// събиране и по изваждане между `add` и `sub`.
    ///
    /// При изваждане, също не забравяйте "едното наум", ако цифрата от която вадите е по-малката,
    /// което ще се преведе до едно "-1" на следващата цифра. Погрижете се винаги да вадите от
    /// по-голямото по абсолютна стойност число, и после сложете какъвто знак се налага.
    ///
    /// Внимавайте с типовете -- изваждане на unsigned от unsigned число може да се счупи.
    ///
    fn sub(self, other: Self) -> Self {

        if self.is_negative() && other.is_negative()
        {
            if check(&self.digits,&other.digits)==Ordering::Greater.then(Ordering::Greater)
            {
            return  Self{digits:subtract_digits(self.digits, other.digits),sign:-1};
            }
            else if check(&self.digits,&other.digits)==Ordering::Less.then(Ordering::Less)
            {
                
                return  Self{digits:subtract_digits(other.digits, self.digits),sign:1};
            }
            else
            {
                let mut vec=Vec::new();
                vec.push(0);
                return  Self{digits:vec,sign:1};
            }
        
        }
        
        else if self.is_positive() && other.is_positive()
        {
            if check(&self.digits,&other.digits)==Ordering::Greater.then(Ordering::Greater)
            {
                return  Self{digits:subtract_digits(self.digits, other.digits),sign:1};
            }
            else if check(&self.digits,&other.digits)==Ordering::Less.then(Ordering::Less)
            {
                return  Self{digits:subtract_digits(other.digits,self.digits),sign:-1};
            }
            else
            {
                let mut vec=Vec::new();
                vec.push(0);
                return  Self{digits:vec,sign:1};
            }
        }
        else if self.is_negative() && other.is_positive()
        {
                    return  Self{digits:add_digits(self.digits, other.digits),sign:-1};
    
        }
        else
        {
            return  Self{digits:add_digits(self.digits, other.digits),sign:1};
        }

    }
}

/// Незадължително
fn add_digits(mut left: Vec<u8>, mut right: Vec<u8>) -> Vec<u8> {
 
 
  //let mut flag=true;
  let mut vec=Vec::new();
left.reverse();
right.reverse();
    let mut count=0;
    let mut k=-1;
    let  size;

    if left.len()>=right.len()
    {
        size=right.len();
    }
    else
    {
        size=left.len();
    }


        while size!=count
            {
                
                let mut m=left[count as usize]+right[count as usize];
                if k==1
                {
                    m+=1;
                 
                }
                    if m<=9 
                     {
                        vec.push(m);
                        k= -1;
                     }
                     else
                    {
                      vec.push(m-10);
                      k=1; 
                    }
            count+=1; 
        
            }
if right.len()>left.len()
{
            while right.len()!=count
            {
                let mut m=right[count as usize];
                if k==1 
                {
                    m+=1;
                        if m<=9
                        {
                                vec.push(m);
                                k=-1;
                        }
                        else
                        {
                            vec.push(m-10);
                            k=1;
                        }    
               
                }
                else
                {
                    vec.push(m);
                }
       
        count+=1;

            }
        }
        if left.len()>right.len()
        {
            while(left.len())!=count
            {
                let mut m=left[count as usize];
                if k==1 
                {
                    m+=1;
                        if m<=9
                        {
                                vec.push(m);
                                k=-1;
                        }
                        else
                        {
                            vec.push(m-10);
                            k=1;
                        }    
               
                }
                else
                {
                    vec.push(m);
                }
       
        count+=1;
            }
        }
            if k==1
            {
                vec.push(1);
                
            }
vec.reverse();

 return vec;

  
}

/// Незадължително
fn subtract_digits(mut larger: Vec<u8>, mut smaller: Vec<u8>) -> Vec<u8>  {
    
    larger.reverse();
    smaller.reverse();
let mut vec=Vec::new();
let mut count=0;
let mut k=-1;
while smaller.len()!=count
{
    let mut  m:i8 ;
    
    if k==1
    {
        m= larger[count as usize] as i8 -smaller[count as usize] as i8;
        m-=1;
   k=-1;
    }
    else
    {
         m= larger[count as usize] as i8 -smaller[count as usize] as i8;
    
    }

    if m >= 0
    {
        vec.push(m as u8);
    }
    else{
        m+=10;
      k=1;
    
      
        vec.push(m as u8);
    }
count+=1;

}

while larger.len()!=count
{
    
let mut m:i8;
m=larger[count as usize] as i8;
if k==1 && m==0
{
        m=9;
        vec.push(m as u8);
}
else if k==1 && m!=0
{
    m-=1;
    vec.push(m as u8);
    k=-1;
}
else 
{
    vec.push(m as u8);
}
    count+=1;
}
let mut i =vec.len()-1;
//remove zeros

while vec[i]==0 && i !=0
{
    vec.remove(i);
    i-=1;
}


vec.reverse();

return vec;
}
#[allow(non_snake_case)]
fn check( larger: &Vec<u8>,  smaller: &Vec<u8>) -> Ordering
{
    let _resultG = Ordering::Greater.then(Ordering::Greater);
        let _resultL = Ordering::Less.then(Ordering::Less);
        let _resultE = Ordering::Equal.then(Ordering::Equal);
    if larger.len() > smaller.len() 
    {
        
        return _resultG ;
    }
     else if larger.len() <smaller.len() 
    {
        
        return _resultL;
    } 
    else
  {
            for i  in 0..larger.len() {
                if larger[i as usize]   > smaller[i as usize] 
                {
                    
                    return _resultG;
                } 
                else if larger[i as usize] < smaller[i as usize]
                {
                    return  _resultL;
                }
               
                  
   }  
   return _resultE;
}

}




fn bigint(s: &str) -> Bigint {
    Bigint::from_str(s).unwrap()
}
#[test]
fn test_basic() {
    assert_eq!(Bigint::new(), bigint("0"));
    assert!(!(Bigint::from_str("123445").is_err()));

    assert!(bigint("12323").is_positive());
    assert!(bigint("-123232").is_negative());


    assert!(bigint("125222") == bigint("000125222"));

    assert!(bigint("-0") == bigint("+0"));
    assert!(bigint("-0") == bigint("0"));
    //assert_eq!(bigint("009999") + bigint("2"), bigint("10001"));

    assert_eq!(bigint("00005555") + bigint("55555"), bigint("61110"));
    assert_eq!(bigint("123456789"), bigint("+123456789"));
    assert_eq!(bigint("+123456789"), bigint("+123456789"));
    assert_eq!(bigint("-123456789"), bigint("-123456789"));
    assert_eq!(bigint("1000000") + bigint("1"), bigint("1000001"));
    assert_eq!(bigint("1") + bigint("1000000"), bigint("1000001"));
    assert_eq!(bigint("-2000") - bigint("999"), bigint("-2999"));
    assert_eq!(bigint("-2000") + bigint("999"), bigint("-1001"));
    assert_eq!(bigint("-200") + bigint("-999"), bigint("-1199"));
    assert_eq!(bigint("200") + bigint("-999"), bigint("-799"));
    assert_eq!(bigint("200") + bigint("999"), bigint("1199"));
    assert_eq!(bigint("2000") - bigint("999"), bigint("1001"));
    assert_eq!(bigint("2000") - bigint("-999"), bigint("2999"));
    assert_eq!(bigint("-2000") - bigint("-999"), bigint("-1001"));
    assert_eq!(bigint("-2000") - bigint("999"), bigint("-2999"));
    assert_eq!(bigint("100000000000000000000000000000") - bigint("1"), bigint("99999999999999999999999999999"));
    assert_eq!(bigint("2000") - bigint("1999"), bigint("1"));
    assert_eq!(bigint("200") - bigint("300"), bigint("-100"));
    assert_eq!(bigint("-200") + bigint("300"), bigint("100"));
    assert_eq!(bigint("200") + bigint("-300"), bigint("-100"));
    assert_eq!(bigint("200") + bigint("300"), bigint("500"));
    assert_eq!(bigint("-200") + bigint("-300"), bigint("-500"));
   assert_eq!(bigint("2000") - bigint("2000"), bigint("0"));
   assert_eq!(bigint("-2000") + bigint("2000"), bigint("0"));
   assert_eq!(bigint("2000") + bigint("-2000"), bigint("0"));
   assert_eq!(bigint("2000") + bigint("-2000"), bigint(""));
    assert_eq!(bigint("-200") - bigint("300"), bigint("-500"));
    assert_eq!(bigint("200") - bigint("-300"), bigint("500"));
    assert_eq!(bigint("200") - bigint("300"), bigint("-100"));
    assert_eq!(bigint("-200") - bigint("-300"), bigint("100"));
    //--
    
    assert_eq!(bigint("200") - bigint("200"), bigint("0"));
    assert_eq!(bigint("-200") + bigint("200"), bigint("0"));
    assert_eq!(bigint("-200") - bigint("-200"), bigint("0"));
    assert_eq!(bigint("200") + bigint("-200"), bigint("0"));


    assert_eq!(bigint("00000020000000000000000000000000000000000000000000") + bigint("-19999999999999999999999999999999999999999999"), bigint("1"));

   // assert_eq!(bigint("444") + bigint("5555"), bigint("9999"));
   // assert_eq!(bigint("579") - bigint("456"), bigint("123"));

   assert!(bigint("-123") < bigint("-122"));

   assert_eq!(Bigint::new(), bigint("0"));
    assert!(Bigint::from_str("foobar").is_err());

    assert!(bigint("1").is_positive());
    assert!(bigint("-1").is_negative());
    assert_eq!(bigint("000000") - bigint("00000"), bigint("0"));
    assert_eq!(bigint("123") + bigint("456"), bigint("579"));
    assert_eq!(bigint("579") - bigint("456"), bigint("123"));
    assert_eq!(bigint("5") - bigint("5"), bigint(""));
    assert!(bigint("123") > bigint("122"));
    assert!(bigint("000000") == bigint("0"));
    assert!(bigint("000000") == bigint("0"));
    assert!(bigint("-0") == bigint("0"));
    assert!(bigint("-0") == bigint("+0"));
    assert!(bigint("+0") == bigint("+0"));
    assert!(bigint("0") == bigint("+0"));
    assert!(bigint("0") == bigint("-0"));
    assert!(bigint("-0") == bigint("-0"));
}

#[test]
fn test_sub_mixed() {
    assert_eq!(Bigint::from_str("-1000").unwrap() - Bigint::from_str("50").unwrap(),
               Bigint::from_str("-1050").unwrap());
 
    assert_eq!(Bigint::from_str("50").unwrap() - Bigint::from_str("-1000").unwrap(),
               Bigint::from_str("1050").unwrap());
 
    assert_eq!(Bigint::from_str("-10").unwrap() - Bigint::from_str("-10").unwrap(),
               Bigint::from_str("0").unwrap());
}

#[test]
fn test_sub_negative() {
    assert_eq!(Bigint::from_str("-50").unwrap() - Bigint::from_str("-40").unwrap(),
               Bigint::from_str("-10").unwrap());
 
    assert_eq!(Bigint::from_str("-1000").unwrap() - Bigint::from_str("-50").unwrap(),
               Bigint::from_str("-950").unwrap());
 
    assert_eq!(Bigint::from_str("-10").unwrap() - Bigint::from_str("-10").unwrap(),
               Bigint::from_str("0").unwrap());
 
    assert_eq!(Bigint::from_str("-199").unwrap() - Bigint::from_str("-9").unwrap(),
               Bigint::from_str("-190").unwrap());
 
    assert_eq!(Bigint::from_str("-9").unwrap() - Bigint::from_str("-199").unwrap(),
               Bigint::from_str("190").unwrap());
}

#[test]
fn test_sub_positive() {
    assert_eq!(Bigint::from_str("50").unwrap() - Bigint::from_str("40").unwrap(),
               Bigint::from_str("10").unwrap());
 
    assert_eq!(Bigint::from_str("1000").unwrap() - Bigint::from_str("50").unwrap(),
               Bigint::from_str("950").unwrap());
 
    assert_eq!(Bigint::from_str("10").unwrap() - Bigint::from_str("10").unwrap(),
               Bigint::from_str("0").unwrap());
 
    assert_eq!(Bigint::from_str("199").unwrap() - Bigint::from_str("9").unwrap(),
               Bigint::from_str("190").unwrap());
 
    assert_eq!(Bigint::from_str("9").unwrap() - Bigint::from_str("199").unwrap(),
               Bigint::from_str("-190").unwrap());
}


#[test]
fn test_add_negative() {
    assert_eq!(Bigint::from_str("-10").unwrap() + Bigint::from_str("-10").unwrap(),
               Bigint::from_str("-20").unwrap());
 
    assert_eq!(Bigint::from_str("-1000000000000000000000000000000000000000000").unwrap()
                   + Bigint::from_str("-1000000000000000000000000000000000000000000").unwrap(),
               Bigint::from_str("-2000000000000000000000000000000000000000000").unwrap());
 
    assert_eq!(Bigint::from_str("-501").unwrap() + Bigint::from_str("-501").unwrap(),
               Bigint::from_str("-1002").unwrap());
}
#[test]
fn test_add_positive() {
    assert_eq!(Bigint::from_str("10").unwrap() + Bigint::from_str("10").unwrap(),
               Bigint::from_str("20").unwrap());
 
    assert_eq!(Bigint::from_str("1000000000000000000000000000000000000000000").unwrap()
                   + Bigint::from_str("1000000000000000000000000000000000000000000").unwrap(),
               Bigint::from_str("2000000000000000000000000000000000000000000").unwrap());
 
    assert_eq!(Bigint::from_str("501").unwrap() + Bigint::from_str("501").unwrap(),
               Bigint::from_str("1002").unwrap());
}

#[test]
fn test_ord() {
    let positive_small = Bigint::from_str("10").unwrap();
    let positive_big = Bigint::from_str("1000000000000000000000000000000000000000000").unwrap();
    let negative_small = Bigint::from_str("-1").unwrap();
    let negative_big = Bigint::from_str("-1000000000000000000000000000000000000000000").unwrap();
 
    assert!(positive_small < positive_big);
    assert!(negative_small < positive_big);
    assert!(negative_big < positive_big);
    assert!(negative_big < negative_small);
}
#[test]
fn test_equality_leading_zeros() {
    let number_normal = Bigint::from_str("123").unwrap();
    let number_padded = Bigint::from_str("0000123").unwrap();
 
    assert_eq!(number_normal, number_padded);
}
#[test]
fn test_equality_negative() {
    let biging_left = Bigint::from_str("-1000000000000000000000000000000000000000000").unwrap();
    let biging_right = Bigint::from_str("-1000000000000000000000000000000000000000000").unwrap();
 
    assert_eq!(biging_left, biging_right);
    assert_eq!(Bigint::from_str("-200").unwrap(), Bigint::from_str("-200").unwrap());
}
#[test]
fn test_equality_positive() {
    let biging_left = Bigint::from_str("1000000000000000000000000000000000000000000").unwrap();
    let biging_right = Bigint::from_str("1000000000000000000000000000000000000000000").unwrap();
 
    assert_eq!(biging_left, biging_right);
    assert_eq!(Bigint::from_str("200").unwrap(), Bigint::from_str("+200").unwrap());
}
#[test]
fn test_add() {
    assert_eq!(bigint("123") + bigint("456"), bigint("579"));
    assert_eq!(bigint("123") + bigint("0"), bigint("123"));

    assert_eq!(bigint("123") + bigint("77"), bigint("200"));
    assert_eq!(bigint("123") + bigint("456"), bigint("579"));
    assert_eq!(bigint("123") + bigint("456"), bigint("579"));
}

#[test]
fn test_equality_zero() {
    let zero_empty = Bigint::from_str("0").unwrap();
    let zero_plus = Bigint::from_str("+").unwrap();
    let zero_minus = Bigint::from_str("-").unwrap();
    let zero_positive = Bigint::from_str("+0").unwrap();
    let zero_negative = Bigint::from_str("-0").unwrap();
    let zero_neutral = Bigint::from_str("0").unwrap();
 
    assert_eq!(zero_empty, zero_positive);
    assert_eq!(zero_positive, zero_plus);
    assert_eq!(zero_plus, zero_minus);
    assert_eq!(zero_minus, zero_negative);
    assert_eq!(zero_positive, zero_negative);
   assert_eq!(zero_negative, zero_neutral);
}



#[test]
fn test_from_str_01_error() {
    assert!(Bigint::from_str("a").is_err());
    assert!(Bigint::from_str("1a").is_err());
    assert!(Bigint::from_str("111111111a").is_err());
    assert!(Bigint::from_str("-111111111a").is_err());
    assert!(Bigint::from_str("-+111111111a").is_err());
    assert!(Bigint::from_str("+111111 111").is_err());
    assert!(Bigint::from_str("++").is_err());
    assert!(Bigint::from_str("+-").is_err());
    assert!(Bigint::from_str("--").is_err());
}



#[test]
fn test_basic1() {
   assert_eq!(Bigint::new(), bigint("0"));
    assert!(Bigint::from_str("foobar").is_err());
    //assert_eq!(Bigint::from_str("123"), bigint("123"));

    assert!(bigint("1").is_positive());
    assert!(bigint("-1").is_negative());

    assert_eq!(bigint("123") + bigint("456"), bigint("579"));
    assert_eq!(bigint("579") - bigint("456"), bigint("123"));
    assert_eq!(bigint("456") - bigint("579"), bigint("-123"));

    assert!(bigint("123") > bigint("122"));
    assert!(bigint("122") == bigint("122"));
    assert!(bigint("122") > bigint("12"));
    assert!(bigint("122") > bigint("22"));
    assert!(bigint("+0") == bigint("0"));
    assert!(bigint("-0") == bigint("0"));
    assert!(bigint("-0") == bigint("+0"));
}

#[test]
fn test_add_any() {
    assert_eq!(Bigint::from_str("-11").unwrap() + Bigint::from_str("11").unwrap(),
               Bigint::from_str("").unwrap());
}





